security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: bcrypt
            cost: 12

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # Votre provider d’utilisateurs permettant d'identifier un utilisateur à partir de son email
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            stateless: true
            security: false

        public:
            pattern: ^/(login|home|register|access-denied)
            stateless: true
            security: false

        main:
            pattern: ^/
            stateless: true
            provider: app_user_provider
            # On utilise notre authentificateur personnalisé pour récupérer le token depuis le cookie
            custom_authenticators: 
                - App\Security\JwtAuthenticator

            # Gestion pour la session PHP mais nous utilisons le JWT
            # logout:
            #     path: /logout
            #     # Vous pouvez ajouter un callback pour supprimer le cookie de déconnexion
            #     invalidate_session: false

            # Gestion des redirections pour les utilisateurs n'ayant pas les droits suffisants
            access_denied_handler: App\Security\AccessDeniedHandler


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # Les pages de login home et inscription sont accessibles anonymement
        - { path: ^/(login|register|home), roles: IS_AUTHENTICATED_ANONYMOUSLY }
        - { path: ^/access-denied, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        - { path: ^/admin, roles: ROLE_ADMIN }
        - { path: ^/profile, roles: ROLE_USER }
        
        # Le reste des pages nécessite d'être connecté (par exemple ROLE_USER)
        - { path: ^/, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
