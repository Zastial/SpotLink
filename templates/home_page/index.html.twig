{% extends 'base.html.twig' %}

{% block title %}HomePage{% endblock %}

{% block body %}
<div class="flex justify-center">
    <div class="flex flex-row w-80 h-[75vh]">
        <div class="w-1/3 bg-white shadow-lg rounded-lg p-6 mr-4 overflow-y-auto h-[75vh]">
            <div class="mb-4">
                <h2 class="text-2xl font-bold text-primary mb-2">Filtre par catégorie</h2>
                <select id="categoryFilter" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary">
                    <option value="">Tous</option>
                    {% for category in categories %}
                        <option value="{{ category.id }}" style="color: {{ category.markerColor }}">{{ category.name }}</option>
                    {% endfor %}
                </select>
            </div>
        
            <ul class="list-none space-y-4">
                {% for event in events %}
                    <li class="p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition-all cursor-pointer" tabindex="0" data-event-id="{{ event.id }}" data-category-id="{{ event.category.id }}">
                        <div class="font-bold text-lg text-primary">
                            <a data-turbo="false" href="{{ path('event_detail', { 'id': event.id }) }}" class="hover:underline">
                                {{ event.name|length > 35 ? event.name|slice(0, 35) ~ '...' : event.name }}
                            </a>
                            {% if event.locationName %}
                                - <span class="text-gray-800">{{ event.locationName|length > 15 ? event.locationName|slice(0, 15) ~ '...' : event.locationName }}</span>
                            {% elseif event.city %}
                                - <span class="text-gray-800">{{ event.city|length > 15 ? event.city|slice(0, 15) ~ '...' : event.city }}</span>
                            {% endif %}
                        </div>
                        <div class="text-sm text-gray-600 event-description">{{ event.description }}</div>
                        <div class="text-sm text-gray-600">
                            Organisateur : 
                            {% if event.creator.username %}
                                {{ event.creator.username }}
                            {% else %}
                                {{ event.creator.firstName }} {{ event.creator.lastName }}
                            {% endif %}
                        </div>
                        <div class="text-sm mt-1 flex space-x-2">
                            <span class="px-1 py-1 rounded-full border" style="border-color: {{ markerColors[event.id] | default('#FFC0CB') }}; color: {{ markerColors[event.id] | default('#000') }};">
                                <i class="{{ icons[event.id] }}"></i>
                            </span>
                            <span class="text-sm rounded-full border-2 px-2 py-1">Date : {{ event.dateStart|date('Y-m-d H:i') }}</span>
                        </div>
                    </li>
                {% endfor %}
                {% if events|length == 0 %}
                    <li class="p-4 border border-gray-300 rounded-lg text-center">
                        Aucun événements dans cette région
                    </li>
                {% endif %}
            </ul>
        </div>

        <div id="map" class="w-2/3 rounded-xl border border-grey-300"></div>
    </div>
</div>

<style>
.event-marker {
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 10px;
    padding: 5px;
    font-size: 14px;
    font-weight: bold;
    color: #333;
    text-align: center;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
}

.event-text {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.event-description {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}
</style>

<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Initialize map centered on France
        var map = L.map('map').setView([46.603354, 1.888334], 6);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            maxZoom: 19
        }).addTo(map);

        // Data passed from Symfony controller
        var events = {{ eventsForJS|json_encode|raw }}; // Event data
        var markerColors = {{ markerColors|json_encode|raw }}; // Colors for different event categories
        var icons = {{ icons|json_encode|raw }}; // Icons for different event categories
        
        // State management
        var markers = {};
        let selectedItem = null;
        let isUserAction = false;
        
        /**
         * Update the visual selection state of list items
         * @param {HTMLElement} newSelectedItem - The list item to select, or null to clear selection
         */
        function updateSelection(newSelectedItem) {            
            // Remove highlighting from previously selected item
            if (selectedItem) {
                selectedItem.classList.remove('bg-gray-100');
            }
            
            // Add highlighting to newly selected item
            if (newSelectedItem) {
                newSelectedItem.classList.add('bg-gray-100');
                selectedItem = newSelectedItem;
            } else if (!isUserAction) {
                selectedItem = null;
            }
        }

        // Create markers for each event with geographic coordinates
        events.forEach(function(event) {
            if (event.latitude && event.longitude) {
                // Create marker & use marker color based on category (DB stored)
                var color = markerColors[event.id] || "#FFC0CB";
                var customIcon = L.divIcon({
                    className: "custom-marker",
                    html: `<div style="background-color: ${color}; width: 20px; height: 20px; border-radius: 50%; border: 2px solid white;"></div>`,
                    iconSize: [20, 20],
                    iconAnchor: [10, 10],
                    popupAnchor: [0, -10]
                });

                // Create marker with popup content
                var marker = L.marker([event.latitude, event.longitude], { icon: customIcon })
                    .addTo(map)
                    .bindPopup(`
                        <div class="popup-content">
                            <h3 class="font-bold event-text">${event.name}</h3>
                            <div class="flex items-center space-x-2 mt-2">
                                <span class="px-1 py-1 rounded-full border" style="border-color: ${markerColors[event.id] || '#FFC0CB'}; color: ${markerColors[event.id] || '#000'};">
                                    <i class="${icons[event.id]}"></i>
                                    <span>${event.category_name}</span>
                                </span>
                            </div>
                            <p class="text-sm">
                                ${event.description.length > 100 ? event.description.substring(0, 100) + '...' : event.description}
                            </p>
                            <p class="text-sm text-gray-600">
                                Date de l'événement : ${new Date(event.created_at).toLocaleDateString()}
                            </p> 
                            <div class="flex justify-between items-center mt-2">
                                <a data-turbo="false" href="/event/${event.id}" class="text-primary hover:underline">
                                    Voir les détails
                                </a>
                                <i class="far fa-star favorite-star cursor-pointer" data-event-id="${event.id}" style="font-size: 1.5em; color: orange;"></i>
                            </div>
                        </div>
                    `);
                
                // Handle popup opening to manage favorite star functionality
                marker.on('popupopen', function(e) {
                    const popup = e.popup;
                    const popupContent = popup.getElement();
                    const star = popupContent.querySelector('.favorite-star');
                    
                    if (star) {
                        // Remove any existing event listeners to prevent duplicates
                        star.replaceWith(star.cloneNode(true));
                        const newStar = popupContent.querySelector('.favorite-star');
                        
                        // WAITING FOR USER TO BE IMPLEMENTED
                        // FOR NOW, STORE IN LOCAL STORAGE
                        const isFavorite = localStorage.getItem(`favorite-event-${event.id}`) === 'true';
                        
                        newStar.className = isFavorite 
                            ? 'fas fa-star favorite-star cursor-pointer' // Solid star
                            : 'far fa-star favorite-star cursor-pointer'; // Outline star
                        
                        newStar.addEventListener('click', function(e) {
                            e.stopPropagation(); // Prevent popup from closing when star is clicked
                            
                            const isFavoriteNow = this.classList.contains('fas');
                            
                            if (isFavoriteNow) {
                                this.classList.remove('fas');
                                this.classList.add('far');
                                localStorage.setItem(`favorite-event-${event.id}`, 'false');
                            } else {
                                this.classList.remove('far');
                                this.classList.add('fas');
                                localStorage.setItem(`favorite-event-${event.id}`, 'true');
                            }
                        });
                    }
                });
                markers[event.id] = marker;

                // Handle popup close
                marker.on('popupclose', function() {
                    if (!isUserAction) {
                        updateSelection(null);
                    }
                });

                // Handle marker click to focus map
                marker.on('click', function() {
                    map.flyTo(marker.getLatLng(), 13, {
                        duration: 1.5,
                        easeLinearity: 0.25
                    });
                    marker.openPopup();
                    
                    const listItem = document.querySelector(`li[data-event-id="${event.id}"]`);
                    if (listItem) {
                        updateSelection(listItem);
                        // Scroll list to show selected item
                        listItem.scrollIntoView({
                            behavior: 'smooth',
                            block: 'center'
                        });
                    }
                });
            }
        });

        // Add click handlers to list items
        document.querySelectorAll('li[data-event-id]').forEach(function (li) {
            li.addEventListener('click', function () {
                isUserAction = true;
                
                // Get event ID and corresponding marker
                var eventId = this.getAttribute('data-event-id');
                var marker = markers[eventId];
                
                updateSelection(this);
                
                // Center map on selected marker and show popup
                if (marker) {
                    map.flyTo(marker.getLatLng(), 13, {
                        duration: 1.5,
                        easeLinearity: 0.25
                    });
                    marker.openPopup();
                }
                
                setTimeout(function() {
                    isUserAction = false;
                }, 300);
            });
        });

        // Handle category filtering
        const categoryFilter = document.getElementById('categoryFilter');
        categoryFilter.addEventListener('change', function() {
            const selectedCategoryId = this.value;
            const eventItems = document.querySelectorAll('li[data-event-id]');
            
            // Filter list items by selected category
            eventItems.forEach(function(item) {
                const categoryId = item.getAttribute('data-category-id');
                if (!selectedCategoryId || categoryId === selectedCategoryId) {
                    item.style.display = '';
                } else {
                    item.style.display = 'none';
                }
            });

            // Update map markers to match filtered list
            for (const [eventId, marker] of Object.entries(markers)) {
                const eventElement = document.querySelector(`li[data-event-id="${eventId}"]`);
                if (eventElement.style.display === 'none') {
                    map.removeLayer(marker);
                } else if (!map.hasLayer(marker)) {
                    marker.addTo(map);
                }
            }
        });
    });
</script>

{% endblock %}
