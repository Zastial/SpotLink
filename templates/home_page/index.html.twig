{% extends 'base.html.twig' %}

{% block title %}HomePage{% endblock %}

{% block body %}
<div class="flex justify-center">
    <div class="flex flex-col lg:flex-row w-[95vw] md:w-[90vw] lg:w-[80vw]">
        <div class="desktop-list w-full lg:w-1/3 bg-white shadow-lg rounded-lg p-6 lg:mr-4 overflow-y-auto h-[50vh] lg:h-[75vh] list-visibility">
            <div class="mb-4">
                <h2 class="text-2xl font-bold text-primary mb-2">Filtre par catégorie</h2>
                <select id="categoryFilter" class="w-full p-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary">
                    <option value="">Tous</option>
                    {% for category in categories %}
                        <option value="{{ category.id }}" style="color: {{ category.markerColor }}">{{ category.name }}</option>
                    {% endfor %}
                </select>
            </div>
        
            <ul class="list-none space-y-4">
                {% for event in events %}
                    <li class="p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition-all cursor-pointer" tabindex="0" data-event-id="{{ event.id }}" data-category-id="{{ event.category.id }}">
                        <div class="font-bold text-lg text-primary">
                            <a data-turbo="false" href="{{ path('event_detail', { 'id': event.id }) }}" class="hover:underline">
                                {{ event.name|length > 35 ? event.name|slice(0, 35) ~ '...' : event.name }}
                            </a>
                            {% if event.locationName %}
                                - <span class="text-gray-800">{{ event.locationName|length > 15 ? event.locationName|slice(0, 15) ~ '...' : event.locationName }}</span>
                            {% elseif event.city %}
                                - <span class="text-gray-800">{{ event.city|length > 15 ? event.city|slice(0, 15) ~ '...' : event.city }}</span>
                            {% endif %}
                        </div>
                        <div class="text-sm text-gray-600 vent-description">{{ event.description }}</div>
                        <div class="text-sm text-gray-600">
                            Organisateur : 
                            {% if event.creator.username %}
                                {{ event.creator.username }}
                            {% else %}
                                {{ event.creator.firstName }} {{ event.creator.lastName }}
                            {% endif %}
                        </div>
                        <div class="text-sm mt-1 flex space-x-2">
                            <span class="px-1 py-1 rounded-full border" style="border-color: {{ markerColors[event.id] | default('#FFC0CB') }}; color: {{ markerColors[event.id] | default('#000') }};">
                                <i class="{{ icons[event.id] }}"></i>
                            </span>
                            <span class="text-sm rounded-full border-2 px-2 py-1">Date : {{ event.dateStart|date('Y-m-d H:i') }}</span>
                        </div>
                    </li>
                {% endfor %}
                {% if events|length == 0 %}
                    <li class="p-4 border border-gray-300 rounded-lg text-center">
                        Aucun événements dans cette région
                    </li>
                {% endif %}
                <div id="desktop-no-results" class="hidden p-4 border border-gray-300 rounded-lg text-center">
                    Aucun événement dans cette catégorie
                </div>
            </ul>
        </div>

        <!-- Map (full width on mobile, 2/3 on desktop) -->
        <div id="map" class="w-full lg:w-2/3 rounded-xl border border-grey-300 h-[65vh] lg:h-[75vh]"></div>
    </div>

    <div id="mobile-bottom-sheet" class="lg:hidden fixed bottom-0 left-0 right-0 bg-white shadow-[0_-4px_6px_-1px_rgba(0,0,0,0.1)] rounded-t-xl z-40">
        <!-- Handle/Pull tab -->
        <div id="bottom-sheet-handle" class="flex justify-center py-2 cursor-pointer">
            <div class="w-12 h-1 bg-gray-300 rounded-full"></div>
        </div>
        
        <!-- Header -->
        <div class="px-4 pt-2 pb-4 border-b">
            <div class="flex justify-between items-center">
                <h2 class="text-xl font-bold text-primary">Événements</h2>
                <div class="flex items-center">
                    <span id="event-count" class="mr-2 text-sm bg-primary text-white px-2 py-1 rounded-full">{{ events|length }}</span>
                    <select id="mobileCategoryFilter" class="p-2 text-sm border border-gray-300 rounded-lg">
                        <option value="">Tous</option>
                        {% for category in categories %}
                            <option value="{{ category.id }}">{{ category.name }}</option>
                        {% endfor %}
                    </select>
                </div>
            </div>
        </div>
        
        <!-- Content -->
        <div id="bottom-sheet-content" class="overflow-y-auto px-4 pb-safe">
            <ul class="list-none space-y-4 py-4">
                {% for event in events %}
                    <li class="p-4 border border-gray-300 rounded-lg hover:bg-gray-50 transition-all cursor-pointer mobile-event-item" tabindex="0" data-event-id="{{ event.id }}" data-category-id="{{ event.category.id }}">
                        <div class="font-bold text-lg text-primary">
                            <a data-turbo="false" href="{{ path('event_detail', { 'id': event.id }) }}" class="hover:underline">
                                {{ event.name|length > 35 ? event.name|slice(0, 35) ~ '...' : event.name }}
                            </a>
                            {% if event.locationName %}
                                - <span class="text-gray-800">{{ event.locationName|length > 15 ? event.locationName|slice(0, 15) ~ '...' : event.locationName }}</span>
                            {% elseif event.city %}
                                - <span class="text-gray-800">{{ event.city|length > 15 ? event.city|slice(0, 15) ~ '...' : event.city }}</span>
                            {% endif %}
                        </div>
                        <div class="text-sm text-gray-600 event-description">{{ event.description }}</div>
                        <div class="text-sm text-gray-600">
                            Organisateur : 
                            {% if event.creator.username %}
                                {{ event.creator.username }}
                            {% else %}
                                {{ event.creator.firstName }} {{ event.creator.lastName }}
                            {% endif %}
                        </div>
                        <div class="text-sm mt-1 flex space-x-2">
                            <span class="px-1 py-1 rounded-full border" style="border-color: {{ markerColors[event.id] | default('#FFC0CB') }}; color: {{ markerColors[event.id] | default('#000') }};">
                                <i class="{{ icons[event.id] }}"></i>
                            </span>
                            <span class="text-sm rounded-full border-2 px-2 py-1">Date : {{ event.dateStart|date('Y-m-d H:i') }}</span>
                        </div>
                    </li>
                {% endfor %}
                {% if events|length == 0 %}
                    <li class="p-4 border border-gray-300 rounded-lg text-center">
                        Aucun événements dans cette région
                    </li>
                {% endif %}
                <div id="mobile-no-results" class="hidden p-4 border border-gray-300 rounded-lg text-center">
                    Aucun événement dans cette catégorie
                </div>
            </ul>
        </div>
    </div>
</div>

<style>
.event-marker {
    background-color: rgba(255, 255, 255, 0.8);
    border-radius: 10px;
    padding: 5px;
    font-size: 14px;
    font-weight: bold;
    color: #333;
    text-align: center;
    box-shadow: 0 0 5px rgba(0, 0, 0, 0.2);
}

.event-text {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
}

.event-description {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

.list-visibility {
    display: none;
}

#map {
    position: relative;
    z-index: 10;
}

@media (min-width: 1024px) {
    body {
        padding: 0;
        margin: 0;
        overflow-x: hidden; /* Prevent horizontal scrolling */
    }

    .list-visibility {
        display: block !important;
    }

    #mobile-bottom-sheet {
        display: none;
    }
}

#mobile-bottom-sheet {
    transform: translateY(calc(100% - 100px));
    transition: transform 0.3s ease-out;
    height: 80vh;
    max-height: 80vh;
}

#mobile-bottom-sheet.expanded {
    transform: translateY(0);
}

/* Safe area padding for iOS devices */
.pb-safe {
    padding-bottom: env(safe-area-inset-bottom, 20px);
}

/* Prevent map interaction when bottom sheet is expanded */
.map-inactive {
    pointer-events: none;
}

/* Ensure content scrolls properly */
#bottom-sheet-content {
    height: calc(100% - 60px);
}

/* Add a semi-transparent overlay when sheet is expanded */
.bottom-sheet-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 30;
    opacity: 0;
    transition: opacity 0.3s ease-out;
    pointer-events: none;
}

.bottom-sheet-overlay.visible {
    opacity: 1;
    pointer-events: auto;
}
</style>

<link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const isMobile = window.innerWidth < 1024;
        const mapZoom = isMobile ? 5 : 6;
        // Initialize map centered on France
        var map = L.map('map').setView([46.603354, 1.888334], mapZoom);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; OpenStreetMap contributors',
        maxZoom: 19
    }).addTo(map);


        // Data passed from Symfony controller
        var events = {{ eventsForJS|json_encode|raw }}; // Event data
        var markerColors = {{ markerColors|json_encode|raw }}; // Colors for different event categories
        var icons = {{ icons|json_encode|raw }}; // Icons for different event categories
        
        // State management
        var markers = {};
        let selectedItem = null;
        let isUserAction = false;
        
        /**
         * Update the visual selection state of list items
         * @param {HTMLElement} newSelectedItem - The list item to select, or null to clear selection
         */
        function updateSelection(newSelectedItem) {            
            // Remove highlighting from previously selected item
            if (selectedItem) {
                selectedItem.classList.remove('bg-gray-100');
            }
            
            // Add highlighting to newly selected item
            if (newSelectedItem) {
                newSelectedItem.classList.add('bg-gray-100');
                selectedItem = newSelectedItem;
            } else if (!isUserAction) {
                selectedItem = null;
            }
        }

        // Create markers for each event with geographic coordinates
        events.forEach(function(event) {
            if (event.latitude && event.longitude) {
                // Create marker & use marker color based on category (DB stored)
                var color = markerColors[event.id] || "#FFC0CB";
                var customIcon = L.divIcon({
                    className: "custom-marker",
                    html: `<div style="background-color: ${color}; width: 20px; height: 20px; border-radius: 50%; border: 2px solid white;"></div>`,
                    iconSize: [20, 20],
                    iconAnchor: [10, 10],
                    popupAnchor: [0, -10]
                });

                // Create marker with popup content
                var marker = L.marker([event.latitude, event.longitude], { icon: customIcon })
                    .addTo(map)
                    .bindPopup(`
                        <div class="popup-content">
                            <h3 class="font-bold event-text">${event.name}</h3>
                            <div class="flex items-center space-x-2 mt-2">
                                <span class="px-1 py-1 rounded-full border" style="border-color: ${markerColors[event.id] || '#FFC0CB'}; color: ${markerColors[event.id] || '#000'};">
                                    <i class="${icons[event.id]}"></i>
                                    <span>${event.category_name}</span>
                                </span>
                            </div>
                            <p class="text-sm">
                                ${event.description.length > 100 ? event.description.substring(0, 100) + '...' : event.description}
                            </p>
                            <p class="text-sm text-gray-600">
                                Date de l'événement : ${new Date(event.created_at).toLocaleDateString()}
                            </p> 
                            <div class="flex justify-between items-center mt-2">
                                <a data-turbo="false" href="/event/${event.id}" class="text-primary hover:underline">
                                    Voir les détails
                                </a>
                                <i class="far fa-star favorite-star cursor-pointer" data-event-id="${event.id}" style="font-size: 1.5em; color: orange;"></i>
                            </div>
                        </div>
                    `);
                
                // Handle popup opening to manage favorite star functionality
                marker.on('popupopen', function(e) {
                    const popup = e.popup;
                    const popupContent = popup.getElement();
                    const star = popupContent.querySelector('.favorite-star');
                    
                    if (star) {
                        // Remove any existing event listeners to prevent duplicates
                        star.replaceWith(star.cloneNode(true));
                        const newStar = popupContent.querySelector('.favorite-star');
                        
                        // WAITING FOR USER TO BE IMPLEMENTED
                        // FOR NOW, STORE IN LOCAL STORAGE
                        const isFavorite = localStorage.getItem(`favorite-event-${event.id}`) === 'true';
                        
                        newStar.className = isFavorite 
                            ? 'fas fa-star favorite-star cursor-pointer' // Solid star
                            : 'far fa-star favorite-star cursor-pointer'; // Outline star
                        
                        newStar.addEventListener('click', function(e) {
                            e.stopPropagation(); // Prevent popup from closing when star is clicked
                            
                            const isFavoriteNow = this.classList.contains('fas');
                            
                            if (isFavoriteNow) {
                                this.classList.remove('fas');
                                this.classList.add('far');
                                localStorage.setItem(`favorite-event-${event.id}`, 'false');
                            } else {
                                this.classList.remove('far');
                                this.classList.add('fas');
                                localStorage.setItem(`favorite-event-${event.id}`, 'true');
                            }
                            
                            // Force a redraw of the element to ensure the visual change takes effect
                            this.style.display = 'none';
                            this.offsetHeight; // Trigger a reflow
                            this.style.display = ''; 
                        });
                    }
                });
                markers[event.id] = marker;

                // Handle popup close
                marker.on('popupclose', function() {
                    if (!isUserAction) {
                        updateSelection(null);
                    }
                });

                // Handle marker click to focus map
                marker.on('click', function() {
                    map.flyTo(marker.getLatLng(), 13, {
                        duration: 1.5,
                        easeLinearity: 0.25
                    });
                    marker.openPopup();
                    
                    const listItem = document.querySelector(`li[data-event-id="${event.id}"]`);
                    if (listItem) {
                        updateSelection(listItem);
                        // Scroll list to show selected item
                        listItem.scrollIntoView({
                            behavior: 'smooth',
                            block: 'center'
                        });
                    }
                });
            }
        });

        // Add click handlers to list items
        document.querySelectorAll('li[data-event-id]').forEach(function (li) {
            li.addEventListener('click', function () {
                isUserAction = true;
                
                // Get event ID and corresponding marker
                var eventId = this.getAttribute('data-event-id');
                var marker = markers[eventId];
                
                updateSelection(this);
                
                // Center map on selected marker and show popup
                if (marker) {
                    map.flyTo(marker.getLatLng(), 13, {
                        duration: 1.5,
                        easeLinearity: 0.25
                    });
                    marker.openPopup();
                }
                
                setTimeout(function() {
                    isUserAction = false;
                }, 300);
            });
        });

        // Handle category filtering
        const categoryFilter = document.getElementById('categoryFilter');
        categoryFilter.addEventListener('change', function() {
            const selectedCategoryId = this.value;
            const eventItems = document.querySelectorAll('.desktop-list li[data-event-id]');
            const noResultsMsg = document.getElementById('desktop-no-results');
            let visibleCount = 0;
            
            // Filter list items by selected category
            eventItems.forEach(function(item) {
                const categoryId = item.getAttribute('data-category-id');
                if (!selectedCategoryId || categoryId === selectedCategoryId) {
                    item.style.display = '';
                    visibleCount++;
                } else {
                    item.style.display = 'none';
                }
            });
            
            // Show/hide no results message
            if (visibleCount === 0 && noResultsMsg) {
                noResultsMsg.classList.remove('hidden');
            } else if (noResultsMsg) {
                noResultsMsg.classList.add('hidden');
            }

            // Update map markers to match filtered list
            for (const [eventId, marker] of Object.entries(markers)) {
                const eventElement = document.querySelector(`li[data-event-id="${eventId}"]`);
                if (eventElement.style.display === 'none') {
                    map.removeLayer(marker);
                } else if (!map.hasLayer(marker)) {
                    marker.addTo(map);
                }
            }
        });

        // Bottom Sheet Functionality
        const bottomSheet = document.getElementById('mobile-bottom-sheet');
        const bottomSheetHandle = document.getElementById('bottom-sheet-handle');
        const bottomSheetHeader = document.querySelector('#mobile-bottom-sheet .px-4.pt-2.pb-4.border-b');
        const mapElement = document.getElementById('map');
        
        // Create overlay element
        const overlay = document.createElement('div');
        overlay.classList.add('bottom-sheet-overlay');
        document.body.appendChild(overlay);
        
        let startY = 0;
        let startTranslate = 0;
        let sheetHeight = bottomSheet ? bottomSheet.offsetHeight : 0;
        let isDragging = false;
        
        function updateSheetState(expanded) {
            if (!bottomSheet) return;
            
            if (expanded) {
                bottomSheet.classList.add('expanded');
                mapElement.classList.add('map-inactive');
                overlay.classList.add('visible');
            } else {
                bottomSheet.classList.remove('expanded');
                mapElement.classList.remove('map-inactive');
                overlay.classList.remove('visible');
            }
            
            // Reset dragging state
            isDragging = false;
            startY = 0;
            
            // Invalidate map size when sheet state changes
            setTimeout(() => {
                if (map) map.invalidateSize();
            }, 300);
        }
        
        // Function to expand sheet - can be reused for different elements
        function handleSheetClick(e) {
            // Don't expand if clicking on interactive elements like the filter dropdown
            if (e.target.tagName === 'SELECT' || 
                e.target.closest('select') || 
                isDragging) {
                return;
            }
            
            const isExpanded = bottomSheet.classList.contains('expanded');
            if (!isExpanded) {
                updateSheetState(true);
            }
        }
        
        // Make entire visible part of bottom sheet clickable to expand
        if (bottomSheet) {
            // Handle already has its own event listeners for drag/touch
            bottomSheetHandle.addEventListener('click', function(e) {
                if (isDragging) return;
                
                const isExpanded = bottomSheet.classList.contains('expanded');
                updateSheetState(!isExpanded); // Toggle the state
            });
            
            // Make header area clickable (but only to expand, not collapse)
            if (bottomSheetHeader) {
                bottomSheetHeader.addEventListener('click', handleSheetClick);
            }
            
            // Touch events remain on the handle only
            bottomSheetHandle.addEventListener('touchstart', function(e) {
                isDragging = true;
                startY = e.touches[0].clientY;
                startTranslate = bottomSheet.getBoundingClientRect().top;
                bottomSheet.style.transition = 'none';
                e.preventDefault();
            }, { passive: false });
            
            bottomSheetHandle.addEventListener('touchmove', function(e) {
                if (!isDragging) return;
                
                const currentY = e.touches[0].clientY;
                const deltaY = currentY - startY;
                const newTranslate = Math.max(0, Math.min(sheetHeight - 100, startTranslate + deltaY));
                
                bottomSheet.style.transform = `translateY(${newTranslate}px)`;
                e.preventDefault(); // Prevent scrolling during handle drag
            }, { passive: false });
            
            bottomSheetHandle.addEventListener('touchend', function(e) {
                if (!isDragging) return;
                
                bottomSheet.style.transition = 'transform 0.3s ease-out';
                const currentTranslate = bottomSheet.getBoundingClientRect().top;
                
                // If dragged more than 1/3 of the way, collapse, otherwise expand
                const threshold = sheetHeight / 3;
                updateSheetState(currentTranslate < threshold);
                
                isDragging = false;
                startY = 0;
            });
        }
        
        // Close bottom sheet when overlay is clicked
        overlay.addEventListener('click', function() {
            updateSheetState(false);
        });
        
        // Handle category filtering on mobile
        const mobileCategoryFilter = document.getElementById('mobileCategoryFilter');
        if (mobileCategoryFilter) {
            mobileCategoryFilter.addEventListener('change', function() {
                const selectedCategoryId = this.value;
                const eventItems = document.querySelectorAll('.mobile-event-item');
                const noResultsMsg = document.getElementById('mobile-no-results');
                let visibleCount = 0;
                
                // Filter mobile list items
                eventItems.forEach(function(item) {
                    const categoryId = item.getAttribute('data-category-id');
                    if (!selectedCategoryId || categoryId === selectedCategoryId) {
                        item.style.display = '';
                        visibleCount++;
                    } else {
                        item.style.display = 'none';
                    }
                });
                
                // Show/hide no results message
                if (visibleCount === 0 && noResultsMsg) {
                    noResultsMsg.classList.remove('hidden');
                } else if (noResultsMsg) {
                    noResultsMsg.classList.add('hidden');
                }
                
                // Update counter
                const eventCount = document.getElementById('event-count');
                if (eventCount) {
                    eventCount.textContent = visibleCount;
                }
                
                // Mirror filtering to map markers (reuse existing code)
                for (const [eventId, marker] of Object.entries(markers)) {
                    const eventElement = document.querySelector(`.mobile-event-item[data-event-id="${eventId}"]`);
                    if (eventElement && eventElement.style.display === 'none') {
                        map.removeLayer(marker);
                    } else if (eventElement && !map.hasLayer(marker)) {
                        marker.addTo(map);
                    }
                }
            });
        }
        
        // Make mobile event items interactive
        document.querySelectorAll('.mobile-event-item').forEach(function(item) {
            item.addEventListener('click', function(e) {
                // Don't trigger if they clicked the link
                if (e.target.tagName === 'A') return;
                
                const eventId = this.getAttribute('data-event-id');
                const marker = markers[eventId];
                
                if (marker) {
                    map.flyTo(marker.getLatLng(), 13, {
                        duration: 1.5, 
                        easeLinearity: 0.25
                    });
                    marker.openPopup();
                    
                    // Minimize the sheet after selection
                    updateSheetState(false);
                }
            });
        });
        
        // Ensure proper sizing on orientation change
        window.addEventListener('resize', function() {
            sheetHeight = bottomSheet ? bottomSheet.offsetHeight : 0;
            
            // Reset the sheet position
            if (bottomSheet && !bottomSheet.classList.contains('expanded')) {
                bottomSheet.style.transform = 'translateY(calc(100% - 60px))';
            }
            
            if (map) map.invalidateSize();
        });
    });
</script>

{% endblock %}
